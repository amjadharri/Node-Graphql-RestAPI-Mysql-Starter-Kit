import DB from "./../../database/database.js";

class {{controllerName name}}Controller {
	constructor() {
		// constructor method
	}
	async {{controllerName name}}ViewAll(_, args) {
		try {
			let argsWhere = {...args};
			delete argsWhere['page'];
			delete argsWhere['limit'];
			return DB.models.{{toLowerCase name}}.findAll({
				where: argsWhere,
				limit: args.limit || 20,
				offset: args.page
			})
		} catch (e) {
			return {
				errorMessageType: 'Backend Error',
				errorMessage: `Something went wrong, ${e.message}`,
				statusCode: 'INTERNAL_SERVER_ERROR'
			}
		}
	}


	async {{controllerName name}}Create(_, args) {
		try {
			try {
				let model = await DB.models.{{toLowerCase name}}.create(args);
				model.statusCode = 'CREATED';
				return model;
			}catch (e) {
				return {
					errorMessageType: 'Backend Error',
					errorMessage: `Something went wrong while creating {{controllerName name}}, ${e.message}`,
					statusCode: 'INTERNAL_SERVER_ERROR'
				}
			}
		} catch (e) {
			return {
				errorMessageType: 'Backend Error',
				errorMessage: `Something went wrong, ${e.message}`,
				statusCode: 'INTERNAL_SERVER_ERROR'
			}
		}
	}

	async {{controllerName name}}Update(_, args) {
		try {
			let model = await DB.models.{{toLowerCase name}}.findById(args.id);
			if (model) {
				await model.updateAttributes(args);
				model.statusCode = 'CREATED';
				return model;
			}else {
				return {
					errorMessageType: 'Not Found',
					errorMessage: `Record not found to update.`,
					statusCode: 'BAD_REQUEST'
				}
			}
		} catch (e) {
			return {
				errorMessageType: 'Backend Error',
				errorMessage: `Something went wrong, ${e.message}`,
				statusCode: 'INTERNAL_SERVER_ERROR'
			}
		}
	}

	async {{controllerName name}}Delete(_, args) {
		try {
			await DB.models.{{toLowerCase name}}.destroy({
				where: {
					id: args.id
				}
			});
			return {
				successMessageType: '{{controllerName name}} Delete',
				successMessage: `{{controllerName name}} Delete successfully`,
				statusCode: 'OK'
			}
		} catch (e) {
			return {
				errorMessageType: 'Backend Error',
				errorMessage: `Something went wrong, ${e.message}`,
				statusCode: 'INTERNAL_SERVER_ERROR'
			}
		}
	}

	async {{controllerName name}}View(_, args) {
		try {
			let model = await DB.models.{{ toLowerCase name }}.findById(args.id);
			model.statusCode = 'OK';
			return model;
		} catch (e) {
			return {
				errorMessageType: 'Backend Error',
				errorMessage: `Something went wrong, ${e.message}`,
				statusCode: 'INTERNAL_SERVER_ERROR'
			}
		}
	}
}


export default new {{controllerName name}}Controller